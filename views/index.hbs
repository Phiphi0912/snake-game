<div class="container mt-5">
  {{> message}}

  <div class="d-flex justify-content-around">
    <button type="button" class="btn btn-outline-primary" onclick="gameStart()">開始遊戲</button>
    <h2 id="score-id">分數：0</h2>
  </div>

  <div class="text-center mt-5">
    <canvas width="400" height="400" id="canvas-id"></canvas>
  </div>
</div>



<script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
  const blockSize = 20
  const blockCount = 20

  let gameInterval
  let snake
  let apple
  let score
  let level

  function gameStart() {
    snake = {
      body: [
        { x: blockCount / 2, y: blockCount / 2 }
      ],
      size: 4,
      direction: { x: 0, y: -1 }
    }

    putApple()
    updateScore(0)
    updateGameLevel(1)
  }

  function updateGameLevel(newLevel) {
    level = newLevel

    if (gameInterval) {
      clearInterval(gameInterval)
    }

    gameInterval = setInterval(gameRoutine, 2000 / (10 + level * 2))
  }

  function putApple() {
    apple = {
      x: Math.floor(Math.random() * blockCount),
      y: Math.floor(Math.random() * blockCount)
    }

    for (let i = 0; i < snake.body.length; i++) {
      if (snake.body[i].x === apple.x && snake.body[i].y === apple.y) {
        putApple()
        break
      }
    }
  }

  function updateScore(newScore) {
    score = newScore
    document.getElementById('score-id').innerHTML = `分數：${score}`
  }

  function gameRoutine() {
    moveSnake()

    if (snakeDead()) {
      gameOver()
      return Swal.fire({
        title: 'Game Over!',
        text: 'Your snake is dead',
        icon: 'warning',
      })
    }

    if (snake.body[0].x === apple.x && snake.body[0].y === apple.y) {
      eatApple()
    }

    updateCanvas();
  }

  function eatApple() {
    snake.size += 1
    putApple()
    updateScore(score + 1)
  }

  function moveSnake() {
    let newBlock = {
      x: snake.body[0].x + snake.direction.x,
      y: snake.body[0].y + snake.direction.y
    }

    snake.body.unshift(newBlock)

    while (snake.body.length > snake.size) {
      snake.body.pop()
    }
  }

  function updateCanvas() {
    const canvas = document.getElementById("canvas-id");
    let context = canvas.getContext("2d");

    context.fillStyle = "black";
    context.fillRect(0, 0, canvas.width, canvas.height);

    context.fillStyle = 'lime' // snake
    for (let i = 0; i < snake.body.length; i++) {
      context.fillRect(
        snake.body[i].x * blockSize + 1,
        snake.body[i].y * blockSize + 1,
        blockSize - 1,
        blockSize - 1
      )
    }

    context.fillStyle = 'red'
    context.fillRect(
      apple.x * blockSize + 1,
      apple.y * blockSize + 1,
      blockSize - 1,
      blockSize - 1
    )
  }

  window.onload = onPageLoaded

  function onPageLoaded() {
    document.addEventListener('keydown', handleKeyDone)
  }

  function handleKeyDone(event) {
    const originX = snake.direction.x
    const originY = snake.direction.y

    if (event.keyCode === 37 && originY !== 0) { //left
      snake.direction.x = -1
      snake.direction.y = 0
    } else if (event.keyCode === 38 && originX !== 0) { //up
      snake.direction.x = 0
      snake.direction.y = -1
    } else if (event.keyCode === 39 && originY !== 0) { //right
      snake.direction.x = 1
      snake.direction.y = 0
    } else if (event.keyCode === 40 && originX !== 0) { //down
      snake.direction.x = 0
      snake.direction.y = 1
    }
  }

  function snakeDead() {
    // hit walls
    if (snake.body[0].x < 0) {
      return true
    } else if (snake.body[0].x >= blockCount) {
      return true
    } else if (snake.body[0].y < 0) {
      return true
    } else if (snake.body[0].y >= blockCount) {
      return true
    }

    // hit body
    for (let i = 1; i < snake.body.length; i++) {
      if (snake.body[0].x === snake.body[i].x && snake.body[0].y === snake.body[i].y) {
        return true
      }
    }

    return false
  }

  function gameOver() {
    clearInterval(gameInterval)
  }

  module.exports = gameLogic
</script>